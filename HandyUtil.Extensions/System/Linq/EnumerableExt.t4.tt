<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
<# 

KeyValuePair<string,string>[] types = new []
{
	new KeyValuePair<string,string>("sbyte","SByte"),
	new KeyValuePair<string,string>("byte","Byte"),
	new KeyValuePair<string,string>("short","Int16"),
	new KeyValuePair<string,string>("ushort","UInt16"),
	new KeyValuePair<string,string>("int","Int32"),
	new KeyValuePair<string,string>("uint","UInt32"),
	new KeyValuePair<string,string>("long","Int64"),
	new KeyValuePair<string,string>("ulong","UInt64"),
	new KeyValuePair<string,string>("float","Float"),
	new KeyValuePair<string,string>("double","Double"),
	new KeyValuePair<string,string>("decimal","Decimal"),
	new KeyValuePair<string,string>("DateTime","DateTime")
};

#>
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Globalization;

namespace HandyUtil.Extensions.System.Linq
{
	public static partial class EnumerableExt
	{
<# foreach(var typeName in types){ #>

		public static string ConcatWith(this IEnumerable<<#= typeName.Key #>> source, string separator, string format)
        {
            return source.Select(s => s.ToString(format)).Aggregate((buf, s) => buf + separator + s);
        }
<# } #>
	}
}

