<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ output extension=".cs" #>
<# 

var types = new Dictionary<string,string>()
{
	{"sbyte","SByte"},
	{"byte","Byte"},
	{"short","Int16"},
	{"ushort","UInt16"},
	{"int","Int32"},
	{"uint","UInt32"},
	{"long","Int64"},
	{"ulong","UInt64"},
	{"float","Float"},
	{"double","Double"},
	{"decimal","Decimal"},
	{"DateTime","DateTime"},
};

#>
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Globalization;

namespace HandyUtil.Extensions.System.Linq
{
	public static partial class EnumerableExt
	{
<# foreach(var typeName in types){ #>

		public static string ConcatWith(this IEnumerable<<#= typeName.Key #>> source, string separator, string format)
        {
            return source.Select(s => s.ToString(format)).Aggregate((buf, s) => buf + separator + s);
        }
<# } #>
	}
}

